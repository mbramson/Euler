// Each new term in the Fibonacci sequence is generated by adding the previous 
// two terms. By starting with 1 and 2, the first 10 terms will be:

// 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

// By considering the terms in the Fibonacci sequence whose values do not 
// exceed four million, find the sum of the even-valued terms.

use std::io;

fn main() {
    println!("Please enter a multiple:");

    let mut multiple = String::new();

    io::stdin().read_line(&mut multiple).ok().expect("Failed to read line");

    let multiple: u32 = multiple.trim().parse().expect("Expected Integer");

    println!("Please enter an upper limit:");

    let mut limit = String::new();

    io::stdin().read_line(&mut limit).ok().expect("Failed to read line");

    let limit: u32 = limit.trim().parse().expect("Expected Integer");

    println!("The sum of all fibonacci numbers which are multiples of {}", 
                multiple);
    println!("and are less than {} is:", limit);
    println!("{}", fibonacci_sum(multiple, limit));
}

fn fibonacci_sum(multiple: u32, limit: u32) -> u32 {
    
    let mut a: u32 = 0;
    let mut b: u32 = 1;
    let mut total: u32 = 0;

    while b < limit {
        if b % multiple == 0 {
            total += b;
        }
        b = a + b;
        a = b - a;
    }

    return total;
}

#[test]
fn test_sum_of_all_even_fibonaccis_below_20() {
    assert_eq!(10, fibonacci_sum(2, 20));
}

#[test]
fn test_sum_of_all_even_fibonaccis_below_5() {
    assert_eq!(2, fibonacci_sum(2, 5));
}

#[test]
fn test_sum_of_all_3_multiple_fibonaccis_below_50() {
    assert_eq!(168, fibonacci_sum(3, 500));
}

#[test]
fn test_sum_of_all_5_multiple_fibonaccis_below_100000() {
    assert_eq!(82460, fibonacci_sum(5, 100000));
}

#[test]
fn test_sum_of_all_whole_fibonaccis_below_5() {
    assert_eq!(7, fibonacci_sum(1, 5));
}
